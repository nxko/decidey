[{"/Users/niko/Documents/VSCodeProjects/indecision-app/src/index.tsx":"1","/Users/niko/Documents/VSCodeProjects/indecision-app/src/reportWebVitals.ts":"2","/Users/niko/Documents/VSCodeProjects/indecision-app/src/App.tsx":"3","/Users/niko/Documents/VSCodeProjects/indecision-app/src/components/decision-card.tsx":"4","/Users/niko/Documents/VSCodeProjects/indecision-app/src/components/option-pill.tsx":"5"},{"size":500,"mtime":1611153186182,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1611153186184,"results":"8","hashOfConfig":"7"},{"size":5992,"mtime":1611246811976,"results":"9","hashOfConfig":"7"},{"size":513,"mtime":1611238519366,"results":"10","hashOfConfig":"7"},{"size":934,"mtime":1611244472043,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"p77wxu",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/niko/Documents/VSCodeProjects/indecision-app/src/index.tsx",[],["25","26"],"/Users/niko/Documents/VSCodeProjects/indecision-app/src/reportWebVitals.ts",[],"/Users/niko/Documents/VSCodeProjects/indecision-app/src/App.tsx",["27","28","29"],"import React, { MouseEvent, useRef } from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport styled from 'styled-components';\nimport DecisionCard from './components/decision-card';\nimport OptionPill from './components/option-pill';\nimport DecideyLogo from './images/decidey-logo.png';\n\n\n\nconst Container = styled.div`\nbackground: #B644F2;\n  min-height: 100vh;\n  min-width: 100vw;\n  position: absolute;\n  top: 0;\n  left: 0;\n  text-align: center;\n  color: #ffffff;\n`;\n\nconst ContentContainer = styled.div`\n  max-width: 500px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Headline = styled.h1`\n  font-size: 100px;\n`;\n\nconst Paragraph = styled.p`\n  font-family: 'futura'; \n`;\n\nconst ButtonContainer = styled.div`\n  margin-top: 16px;\n`;\n\nconst Button = styled.button`\n  background-color: transparent;\n  border: 1px solid white;\n  padding: 8px;\n  color: white;\n  font-family: 'futura';\n  margin-left: 4.5px;\n  margin-right: 4.5px;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  border-radius: 25px;\n  &:hover {\n    color: #B644F2;\n    background-color: white; \n  }\n  &:focus{\n    outline: none;\n  }\n`;\n\nconst InputField = styled.input`\n  border: none; \n  border-radius: 20px;\n  height: 30px;\n  width: 250px; \n  padding-left: 15px;\n  padding-right: 15px;\n  font-family: 'futura';\n  color:  #B644F2;\n  &:focus{\n    outline: none;\n  }\n`;\n\nconst CardContainer = styled.div`\n  display: inline-flex; \n  justify-content: center;\n`;\n\nconst CheckboxContainer = styled.div`\n  display: inline-flex; \n  justify-content: center;\n  align-items: center; \n`;\n\nconst CheckBoxWrapper = styled.div`\n  position: relative;\n`;\nconst CheckBoxLabel = styled.label`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 42px;\n  height: 26px;\n  border-radius: 15px;\n  background: #efefef;\n  cursor: pointer;\n  &::after {\n    content: \"\";\n    display: block;\n    border-radius: 50%;\n    width: 18px;\n    height: 18px;\n    margin: 3px;\n    background: #ffffff;\n    box-shadow: 1px 3px 3px 1px rgba(0, 0, 0, 0.2);\n    transition: 0.2s;\n  }\n`;\nconst CheckBox = styled.input`\n  opacity: 0;\n  z-index: 1;\n  border-radius: 15px;\n  width: 42px;\n  height: 26px;\n  &:checked + ${CheckBoxLabel} {\n    background: #c07de3;\n    &::after {\n      content: \"\";\n      display: block;\n      border-radius: 50%;\n      width: 18px;\n      height: 18px;\n      margin-left: 21px;\n      transition: 0.2s;\n    }\n  }\n`;\n\nfunction App() {\n  const [options, setOptions] = React.useState<string[]>([]);\n  const [decisions, setDecisions] = React.useState<string[]>([]);\n  const [latestDecision, setLatestDecision] = React.useState<string>();\n  const [decideButtonVisible, setDecideButtonVisible] = React.useState<boolean>(true);\n\n  const last5 = decisions.slice(0, 5);\n  let inputRef = useRef<HTMLInputElement>(null);\n\n  const onFormSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const option = inputRef.current!.value;\n    if(option === 'testdata') {\n      setOptions(['Lasagne', 'Pizza', 'Spaghetti', 'Schnitzel', 'Suppe']);\n    } else if(option === '') {\n       alert('Bitte etwas in Textfeld eingeben!');\n    }else {\n      setOptions([...options, option])\n    }\n    inputRef.current!.value = '';\n   }\n\n   const removeOption = (option: string) => {\n     if(option) {\n       let i = 0; \n       while (i < options.length) {\n          if(options[i] === option) {\n            options.splice(i, 1);\n            setOptions([...options]);\n          } else {\n            i++; \n          }\n       }\n     }\n   }\n\n   const resetOptions = (e: MouseEvent<HTMLButtonElement>) => {\n     e.preventDefault()\n     setOptions([]);\n     setDecisions([]);\n     setLatestDecision('');\n     console.log(options);\n   }\n\n   const makeDecision = () => {\n    const randomNum = Math.floor(Math.random() * options.length);\n    const option = options[randomNum]; \n      setDecisions([option,...decisions]);\n      setLatestDecision(option);\n  };\n\n  const tooltipMessage = 'Jede Option kann nur 1x ausgewählt werden.'\n\n  return (\n    <Container>\n      <ContentContainer>\n        <img src={DecideyLogo}/>\n        <Paragraph>Optionen eingeben</Paragraph>\n        <form onSubmit={onFormSubmit}>\n          <InputField type=\"text\" ref={inputRef}/>\n          <br/>\n          <ButtonContainer>\n            <Button type='submit'>Hinzufügen</Button>\n            <Button onClick={resetOptions}>Zurücksetzen</Button>\n          </ButtonContainer>\n          <CheckboxContainer>\n              <p data-tip={tooltipMessage}>\n              <CheckBoxWrapper>\n                <CheckBox id=\"checkbox\" type=\"checkbox\" />\n                <CheckBoxLabel htmlFor=\"checkbox\" />\n              </CheckBoxWrapper>\n              </p>\n            <Paragraph>\n              KO-Mode\n            </Paragraph>\n          </CheckboxContainer>\n        </form>\n        <br/>\n          {options.map((option => (\n            <CardContainer>\n              <OptionPill option={option} onDeleteClick={removeOption}/>\n            </CardContainer>\n          )))}\n          <br/><br/>\n          {options.length > 0 && decideButtonVisible && (\n            <Button onClick={makeDecision}>Entscheiden</Button>\n          )}\n          <Paragraph>\n            Entscheidung\n          </Paragraph>\n          \n          {latestDecision && latestDecision !== '' && (\n            <CardContainer>\n              <DecisionCard decision={latestDecision}/>\n            </CardContainer>\n          )}\n\n          {decisions.length > 0 && (\n            <>\n              <Paragraph>\n                Letzte 5 Entscheidungen\n              </Paragraph>\n                {last5.map((decision) => (\n                  <CardContainer>\n                      <OptionPill option={decision}/>\n                  </CardContainer>\n                ))}\n            </>\n          )}\n          \n          <ReactTooltip \n                place='bottom'\n                type='light'\n                effect='solid'\n                multiline\n              />\n        </ContentContainer>\n    </Container>\n  );\n}\n\nexport default App;\n","/Users/niko/Documents/VSCodeProjects/indecision-app/src/components/decision-card.tsx",[],["30","31"],"/Users/niko/Documents/VSCodeProjects/indecision-app/src/components/option-pill.tsx",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":27,"column":7,"nodeType":"38","messageId":"39","endLine":27,"endColumn":15},{"ruleId":"36","severity":1,"message":"40","line":132,"column":31,"nodeType":"38","messageId":"39","endLine":132,"endColumn":53},{"ruleId":"41","severity":1,"message":"42","line":184,"column":9,"nodeType":"43","endLine":184,"endColumn":33},{"ruleId":"32","replacedBy":"44"},{"ruleId":"34","replacedBy":"45"},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"@typescript-eslint/no-unused-vars","'Headline' is assigned a value but never used.","Identifier","unusedVar","'setDecideButtonVisible' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["46"],["47"],"no-global-assign","no-unsafe-negation"]